https://stackoverflow.com/questions/55020845/kubelet-service-main-process-exited-code-exited-status-255-n-a
https://www.devopszones.com/2019/03/kubelet-failed-to-run-kubelet-failed-to.html 
https://kubernetes.io/docs/reference/kubectl/overview/

kubectl create -f <pod-file.yml>
kubectl apply -f <pod-file.yml>
kubectl get pods
kubectl delete pod myapp-pod
kubectl describe pods
kubectl describe pod myapp-pod
kubectl get all

FORECFULL Delete of pods
kubectl delete pod <PODNAME> --grace-period=0 --force --namespace <NAMESPACE>

kubectl get pods -o wide | grep <nodename>

# once Replica value is increased or decreased we can update the pods based on the following commands
kubectl replace -f <file_name>.yml

kubectl scale --replicas=6 -f <file_name>.yml
kubectl get replicaset
kubectl get replicationcontroller // if replication is set using replicationcontroller(older version)
kubectl delete rc --all
kubectl delete rc <pod-name>
kubectl delete replicaset replicaset-name //Delete all the underlying pods
kubectl delete rs --all
kubectl delete rs <pod-name>
kubectl scale -replicas=6 -f <fle_name>.yml
kubectl scale deployment web --replicas=9
--------------------------------------------

DEPLOYMENTS
kubectl get deployments
kubectl delete deployment <deployment_name>
------------------------

NAMESPACE
To list pods under specific namespace use.

kubectl get pods --namespace=kube-system

To list namespace
>kubcetl create namespace <my-namespace>
>kubectl get namespace
>kubectl get ns
By default the kubectl will display the default namespace. To move to other namespace permenantely use the following command
>kubectl config set-context $(kubectl config current-context) --namespace=dev
After executing the above command and the then if we execute "kubcetl get pods" we will get only the pods which is present in that name space.
Ref: https://kubernetes.io/docs/reference/kubectl/cheatsheet/ -> cheetsheet

To view pods in  all namespaces use 
kubectl get pods --all-namespaces


We can even set how many pods memory and CPU can be used  by using the following resourcequota object
-------------------------------------------
apiVersion: v1
kind: ResourceQuota
metadata: 
	name: compute-quota
	namespace: dev
	
spec: 
 hard: 
   pods: "10"
   requests.cpu: "4"
   requests.memory: 5Gi
   limits.cpu: "10"
   limits.memory: 10Gi
   

----------------------------

To create a pod under specific namespace
kubectl create -f pod_file.yml --namespace=dev

If you want to create the pod on the same namespace repeatedly, This can be hardcoded in the yaml file
it can be moved to metadata section on the POD definition section
Example: 
=============================
apiVersion: v1
kind: Deployment  // this can be deployment,pod, ReplicaSet,namespace
metadata:
  name: myapp-pod-rc
  namespace: dev
  labels:
    app: myapp-RC
    dep: prod-RC
	
===========================

To create a new namespace using yaml file see the complete yaml below.

=========================
apiVersion: v1
kind: Namespace
metadata:
  name: dev
===================
Create namespace using command.
>kubectl create namespace dev

To move the dev name space as default namespace follow the below command
>kubectl config set-context $(kubectl config current-context) --namespace=dev

To list all the pods in all namespaces
>kubectl get pods --all-namespaces

--------------------------
Resource Quota
This resource quota can be used specify how many resource a single namespace can have.
Resource means, CPU limit, memory limit, requested cpu, requested memory

apiVersion: v1
kind: ResourceQuota
metadata:
  name: myapp-pod-rc
  namespace: dev
  
spec:
  hard:
    pods: "10"
	requests.cpu: "4"
	requests.memory: 5Gi
	limits.cpu: "10"
	limits.memory: 10Gi
---------------------------
  
TO list containers inside the pods on all namespaces (fourlines of single command)
kubectl get pods --all-namespaces -o jsonpath="{.items[*].spec.containers[*].image}" |\
tr -s '[[:space:]]' '\n' |\
sort |\
uniq -c

------------------------
To remove the node from the Cluster or Master use the following code
>kubectl drain <node name>
Then
>kubectl uncordon <node name>

-------------------------------------------
To label a node
kubectl label node <node-name> <label-key>=<label-value>
kubectl label node node-1 size=large

---------------------------------
Kubectl daemon sets

>kubectl create -f <daemonset.yaml>
>kubectl get daemonsets
>kubectl describe daemonsets myapp-pod-DS-monitoring
>kubectl get ds --all-namespaces
--------------------------------------
we can download metric-server from GIT  and deploy as pod.
Once the metric-server pod is deployed we can use the follwoing command to get metric details
git clone metric-server.git
kubectl crete -f .
>kubectl top node  // to get cpu and memory usage of node
>kubectl top pod // to get CPU and memory usage of POD
---------------------------
Logging
To view the logs of the POD
>kubectl logs -f <POD-NAME>  //-f to stream pods continiously

If there is more containers in PODS and to view the Logs of that container we should provide the container name 
>kubectl logs -f <POD-NAME>  <Container-name>
-----------------------------------------

Configmap
>kubectl get configmaps
>kubectl get cm
>kubectl describe configmaps
>kubectl create -f config-map.yaml